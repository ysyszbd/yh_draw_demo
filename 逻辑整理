准备：6路视频解码器初始化+唤醒，3d模型障碍物模板加载

拿到障碍物数据后，障碍物进行循环，根据每个障碍物的中心坐标计算出障碍物的8个角点坐标，然后循环判断这8个角点转2d之前是否这8个点都小于0.2，如果都小于0.2则这8个点全部为-1.如果不是都小于0.2，则循环这8个点，将这8个点转为2d。
为了postmessage传输数据的速度，这里使用了sharearraybuffer，来共享内存，所以障碍物会分为视频障碍物、bev障碍物。
bev障碍物只需要转换数据类型，不需要做额外操作；
video障碍物需要提取出来自己需要的7、8、12这3个元素，并且将该障碍物的各视角框坐标拼接在saf中。


视频与视频障碍物的时间戳是否一致
视频障碍物是否与bev障碍物一致
视频障碍物是否与数据一致，我前端是否有数据丢失
bev线条是否与点一致---目前是每次都将内存清空，然后再创建，，需要确定这样是否对内存有影响
视频播放close是否可以重启
ws设置定时链接
bev样式优化


